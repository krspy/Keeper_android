package com.yhsg.safeguard;

import android.app.Activity;
import android.app.NotificationManager;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.os.SystemClock;
import android.util.Log;
import android.widget.Toast;

// NETWORK_PROVIDER ==> 오차범위 50m
// NETWORK_PROVIDER_WIFI ==>
// GPS_PROVIDER ==>
public class gpsmsgService extends Service {
	private static final String TAG="serviceLog";
	NotificationManager nM;
	
	double baseLat;
	double baseLng;
	String baseTel;
	String baseNIC;
	int baseFlag;	//	1:gps	2:network	3:network_wifi	4:err
	
	Thread lThread;
	Thread nThread;
	
	Handler lhandler;
	
	LocationManager locManager;
	Location loc;
	
	double service_lat;
	double service_lng;
	float dist[] = new float[2];
	int service_flag;	// 1:gps 2:netwrok 3:wifi	default = 2;	
						// standard val is considered wifi val  
	
	boolean outOfrange;		//base 50M.  errorrange 1: 16m   2: 50m  3: 10m
	
	@Override
	public void onCreate(){
		super.onCreate();		
		Log.d("serviceLog", "onDestroy()");
	}
	@Override
	public IBinder onBind(Intent intent) {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		Log.d("serviceLog", "onStart()");
	    super.onStartCommand(intent, flags, startId);	    
	    
	    ////////////////////////////////////Server Connect////////////////////////////////
	    /*
	    Bundle blat=intent.getExtras();
	    Bundle blng=intent.getExtras();
	    
	    baseLat=blat.getDouble("Plat");
	    baseLng=blng.getDouble("Plng");
	    baseTel=intent.getStringExtra("Tel");
	    baseNIC=intent.getStringExtra("NIC");
	    baseFlag=intent.getIntExtra("stat", 0);	//default val 0
	    outOfrange=false;
	    service_flag = 2;
	    */
	    ////////////////////////////////////Server Connect////////////////////////////////
	    
	    if(baseFlag == 4)
	    	stopSelf();
	    //Log.d("serviceLog", baseLat+"\n"+baseLng+"\n"+baseTel+"\n"+baseNIC+"\n"+baseFlag);
	    //String provider;
	    
	    ///////////////////////////////////Thread stuff//////////////////////////////////
	    
	    
	    /*
	    lhandler=new Handler();
	    lThread = new Thread(new Runnable(){		//get location info thread
			@Override
			public void run() {
				lhandler.post(new Runnable(){
					@Override
					public void run() {
						while(!lThread.interrupted()){
							SystemClock.sleep(1000*3);
							locManager = (LocationManager)getSystemService(Context.LOCATION_SERVICE);
							if(locManager.isProviderEnabled(LocationManager.GPS_PROVIDER))
								service_flag = 1;
							try{
								if(service_flag == 1){
									Log.v(TAG,"GPS_Provider= "+locManager.isProviderEnabled(LocationManager.GPS_PROVIDER));
									loc = locManager.getLastKnownLocation(locManager.GPS_PROVIDER);
									Log.v(TAG,"G_loc alloacate");
									Log.v(TAG,"G_call listenr");
									locManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, Llistener); //1min , 5m
									Log.v(TAG,"G_call updateLocation()");	
									service_flag=1;		//gps mode
									updateLocation(loc);							
									}
								else{
									Log.v(TAG,"NETWORK_PROVIDER");
									loc = locManager.getLastKnownLocation(locManager.NETWORK_PROVIDER);
									Log.v(TAG,"N_loc alloacate");
									Log.v(TAG,"N_call listenr");
									locManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 0, 0, Llistener); //0sec , 0m
									Log.v(TAG,"N_call chakstatus()");
									chkstatus();
									Log.v(TAG,"call updateLocation()");
									updateLocation(loc);
									}
								//loc.distanceBetween(baseLat, baseLng, service_lat, service_lng, dist);
								//String dis = Float.toString(dist[0]);
								//Log.v(TAG,"distance is"+dis);
								lThread.sleep(1000*0);	//milliseconds 
								} catch (InterruptedException e){
									e.printStackTrace();
								}
							}
					}										
				});
				}
			});
	    nThread = new Thread(new Runnable(){		//notification thread
			@Override
			public void run() {
				while(!nThread.interrupted()){
					try{
					Log.d("serviceLog", "nThread");
					nThread.sleep(1000*3);
					} catch (InterruptedException e){
						e.printStackTrace();
					}
				}
			}
	    	
	    });
	    */
	    //lThread.start();
	    //nThread.start();	    
	    
	    return START_STICKY;
	    }//end of onStart()
	

	@Override
	public void onDestroy() { 
	    Log.d("serviceLog", "onDestroy()");
	    //lThread.interrupt();
	    //lThread=null;
	    locManager.removeUpdates(Llistener);
	    //nThread.interrupt();
	    super.onDestroy();
	    }
////////////////////////////////////////Location stuff////////////////////////////////////////
	private final LocationListener Llistener = new LocationListener(){	
		@Override		
			public void onLocationChanged(Location location) {
				Log.v(TAG,"Llistener change location");
				Toast.makeText(getApplicationContext(),"위치변경",Toast.LENGTH_SHORT).show();
				updateLocation(location);
				Log.v(TAG,"Llistener change location succeed");						
			}
			@Override
			public void onProviderDisabled(String provider) {
				Log.v(TAG,"Llistener disable");
			}

			@Override
			public void onProviderEnabled(String provider) {
				Log.v(TAG,"Llistener enable");
			}

			@Override
			public void onStatusChanged(String provider, int status, Bundle extras) {
				Log.v(TAG,"Llistener change status");
			}	    	
	    };
	    
	private void updateLocation(Location location){
		Log.v(TAG,"Call updateLocation succeed");
	    
	    if(location == null){
	    	Log.v(TAG,"location=null");
	    	Log.v(TAG,"request location");
	    	service_flag=2;
	    	}	    	
	    
	    else if(location != null){
	    	Log.v(TAG,"location != null");
	    	service_lat=location.getLatitude();
	    	service_lng=location.getLongitude();	
	    	Log.v(TAG,"get lat,lng success");
	    	}	
	    }
////////////////////////////////////////Location stuff////////////////////////////////////////
	
///////////////////////////////check network status///////////////////////////////
	private void chkstatus() {
		//flag val ---> 1:gps	2:network	3:network_wifi	4:err
		ConnectivityManager conMan = (ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo status_mobile = conMan.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);
		NetworkInfo status_wifi = conMan.getNetworkInfo(ConnectivityManager.TYPE_WIFI);
		Log.v(TAG,"network ifno initalize");
		//if((status_mobile.isConnected() && status_wifi.isConnected()) || (status_mobile.isFailover() && status_wifi.isConnected()))
		if(status_wifi.isConnected())
			service_flag=3;
		else
			service_flag=2;
		Log.v(TAG,"service_flag finish");
		}
/////////////////////////////check network status///////////////////////////////
	
////////////////////inner class aynctask///////////////////////////////////////////////
	private class asyncTask extends AsyncTask<String, Integer, Integer>{
		@Override
		protected Integer doInBackground(String... params) {
			int getLoc =0;
			
			////////
			publishProgress(getLoc);
			///////
			return null;
		}
		
	}
//////////////////inner class aynctask///////////////////////////////////////////////
}

